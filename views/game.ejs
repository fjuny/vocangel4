<!DOCTYPE html>
<html>
  <%- include('include/_header') %>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.min.js"></script>
  
  <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/addons/p5.sound.min.js"></script>
  <link rel="stylesheet" type="text/css" href="style.css">
  <meta charset="utf-8" />

  <script src="https://unpkg.com/ml5@0.3.1/dist/ml5.min.js"></script>
    <meta charset="utf-8" />
    

    <script src="https://unpkg.com/ml5@0.3.1/dist/ml5.min.js"></script>
  </head>
  <body>
    <script>const model_url = 'https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/';
      let pitch;
      let mic;
      let freq = 0;
      let threshold = 1;
      
      
      let notes = [{
          note: 'E',
          freq: 164.81
        },
        {
          note: 'A',
          freq: 110.00
        },
        {
          note: 'D',
          freq: 146.83
        },
        {
          note: 'G',
          freq: 196.00
        },
        {
          note: 'E',
          freq: 329.63
        },
        {
          note: 'B',
          freq: 246.94
        }
      ];
      
      
      function setup() {
        createCanvas(400, 400);
        audioContext = getAudioContext();
        mic = new p5.AudioIn();
        mic.start(listening);
        getAudioContext().resume();
      }
      
      function listening() {
        console.log('listening');
        pitch = ml5.pitchDetection(
          model_url,
          audioContext,
          mic.stream,
          modelLoaded
        );
      }
      
      function draw() {
        background(0);
        textAlign(CENTER, CENTER);
        fill(255);
        textSize(32);
        text(freq.toFixed(2), width / 2, height - 150);
      
      
        let closestNote = -1;
        let recordDiff = Infinity;
        for (let i = 0; i < notes.length; i++) {
          let diff = freq - notes[i].freq;
          if (abs(diff) < abs(recordDiff)) {
            closestNote = notes[i];
            recordDiff = diff;
          }
        }
      
        textSize(64);
        text(closestNote.note, width / 2, height - 50);
      
      
        let diff = recordDiff;
      
      
        let alpha = map(abs(diff), 0, 100, 255, 0);
        rectMode(CENTER);
        fill(255, alpha);
        stroke(255);
        strokeWeight(1);
        if (abs(diff) < threshold) {
          fill(0, 255, 0);
        }
        rect(200, 100, 200, 50);
      
        stroke(255);
        strokeWeight(4);
        line(200, 0, 200, 200);
      
        noStroke();
        fill(255, 0, 0);
        if (abs(diff) < threshold) {
          fill(0, 255, 0);
        }
        rect(200 + diff / 2, 100, 10, 75);
      
      
      }
      
      function modelLoaded() {
        console.log('model loaded');
        pitch.getPitch(gotPitch);
      }
      
      function gotPitch(error, frequency) {
        if (error) {
          console.error(error);
        } else {
          if (frequency) {
            freq = frequency;
          }
          pitch.getPitch(gotPitch);
        }
      }</script>
  </body>
</html>
